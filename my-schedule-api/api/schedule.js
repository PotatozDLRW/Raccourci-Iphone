const fetch = require('node-fetch');
const ical = require('node-ical');

// L'URL de votre calendrier Outlook .ics
const ICS_URL = 'https://outlook.office365.com/owa/calendar/29140af7ee51428eac1e181824f9b023@cesi.fr/dc5dc8265ae4484e892dec582582180116350832411436285999/calendar.ics';

// --- Logique de Formatage (Gratuite) ---
const EMOJI_MAP = {
    'projet': 'üíª',
    'soutenance': 'üì¢',
    'r√©union': 'üë•',
    'cours': 'üìö',
    'td': 'üìñ',
    'amphi': 'üèõÔ∏è',
    'pause': '‚òï',
    'dejeuner': 'üçΩÔ∏è',
    'd√©jeuner': 'üçΩÔ∏è',
    'pause d√©jeuner': 'üçΩÔ∏è',
    'examen': 'üìù',
    'controle': 'üìù',
    'contr√¥le': 'üìù',
    'test': 'üìù',
    'tp': 'üî¨',
    'travaux pratiques': 'üî¨',
    'stage': 'üéØ',
    'entreprise': 'üè¢',
    'formation': 'üéì',
    'conf√©rence': 'üé§',
    'pr√©sentation': 'üìä',
    'atelier': 'üõ†Ô∏è',
    'workshop': 'üõ†Ô∏è'
};

const getEmoji = (summary) => {
    const lowerSummary = (summary || '').toLowerCase();
    for (const [keyword, icon] of Object.entries(EMOJI_MAP)) {
        if (lowerSummary.includes(keyword)) {
            return icon;
        }
    }
    return '‚û°Ô∏è'; // Emoji par d√©faut
};

// Fonction pour formater la dur√©e
const formatDuration = (start, end) => {
    const duration = (end - start) / (1000 * 60); // dur√©e en minutes
    if (duration >= 60) {
        const hours = Math.floor(duration / 60);
        const minutes = duration % 60;
        return minutes > 0 ? `${hours}h${minutes.toString().padStart(2, '0')}` : `${hours}h`;
    }
    return `${duration}min`;
};

// ----------------------------------------

module.exports = async (req, res) => {
    // Configurer les headers CORS pour permettre les requ√™tes depuis l'iPhone
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    // G√©rer les requ√™tes OPTIONS (preflight)
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    // D√©finir la date d'aujourd'hui sans l'heure pour la comparaison
    const today = new Date();
    today.setHours(0, 0, 0, 0); 
    const isToday = (date) => {
        const eventDate = new Date(date);
        eventDate.setHours(0, 0, 0, 0);
        return eventDate.getTime() === today.getTime();
    };

    try {
        console.log('üîÑ R√©cup√©ration du calendrier ICS...');
        
        // 1. T√©l√©charger et Analyser l'ICS
        const data = await ical.fromURL(ICS_URL, { 
            defaultTimezone: 'Europe/Paris',
            timeout: 10000 // timeout de 10 secondes
        }); 
        
        console.log('üìÖ Analyse des √©v√©nements...');
        const events = Object.values(data).filter(item => item.type === 'VEVENT');
        console.log(`üìä ${events.length} √©v√©nements trouv√©s au total`);
        
        // 2. Filtrer les √©v√©nements pour aujourd'hui
        const todayEvents = events.filter(event => {
            if (!event.start) return false;
            return isToday(event.start);
        });

        console.log(`üéØ ${todayEvents.length} √©v√©nements trouv√©s pour aujourd'hui`);

        // 3. Ajouter automatiquement la pause d√©jeuner (sauf le jeudi)
        const dayOfWeek = today.getDay(); // 0 = dimanche, 1 = lundi, ..., 4 = jeudi
        const isThursday = dayOfWeek === 4;
        
        if (!isThursday && todayEvents.length > 0) {
            // Cr√©er un √©v√©nement pause d√©jeuner automatique
            const lunchBreak = {
                start: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 12, 30),
                end: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 13, 30),
                summary: 'Pause d√©jeuner',
                type: 'VEVENT',
                isAutomatic: true
            };
            
            // V√©rifier s'il n'y a pas d√©j√† un √©v√©nement qui chevauche cette p√©riode
            const hasLunchConflict = todayEvents.some(event => {
                const eventStart = new Date(event.start);
                const eventEnd = new Date(event.end);
                const lunchStart = lunchBreak.start;
                const lunchEnd = lunchBreak.end;
                
                // V√©rifier le chevauchement
                return (eventStart < lunchEnd && eventEnd > lunchStart);
            });
            
            // Ajouter la pause d√©jeuner seulement s'il n'y a pas de conflit
            if (!hasLunchConflict) {
                todayEvents.push(lunchBreak);
                console.log('üçΩÔ∏è Pause d√©jeuner automatique ajout√©e (12h30-13h30)');
            } else {
                console.log('‚ö†Ô∏è Pause d√©jeuner non ajout√©e - conflit d√©tect√© avec un autre √©v√©nement');
            }
        } else if (isThursday) {
            console.log('üìÖ Jeudi d√©tect√© - pas de pause d√©jeuner automatique');
        }

        // 4. Formater le r√©sultat
        let scheduleText = '';
        
        if (todayEvents.length > 0) {
            // Trier les √©v√©nements par heure de d√©but
            todayEvents.sort((a, b) => new Date(a.start) - new Date(b.start));

            const dayName = today.toLocaleDateString('fr-FR', { weekday: 'long' });
            const dateStr = today.toLocaleDateString('fr-FR', { 
                day: 'numeric', 
                month: 'long', 
                year: 'numeric' 
            });
            
            scheduleText += `üéâ Salut ! Voici ton programme pour ${dayName.charAt(0).toUpperCase() + dayName.slice(1)} ${dateStr} :\n\n`;

            todayEvents.forEach((event, index) => {
                const start = new Date(event.start);
                const end = new Date(event.end);
                
                const startTime = start.toLocaleTimeString('fr-FR', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    timeZone: 'Europe/Paris'
                });
                const endTime = end.toLocaleTimeString('fr-FR', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    timeZone: 'Europe/Paris'
                });
                
                const emoji = getEmoji(event.summary || '');
                const duration = formatDuration(start, end);
                
                // Extraire les informations de lieu (plusieurs sources possibles)
                let locationInfo = '';
                if (event.location && event.location.trim()) {
                    locationInfo = ` üìç ${event.location.trim()}`;
                } else if (event.description && event.description.includes('Salle')) {
                    // Chercher "Salle" dans la description
                    const salleMatch = event.description.match(/Salle[:\s]*([^\n\r,]+)/i);
                    if (salleMatch) {
                        locationInfo = ` üìç Salle ${salleMatch[1].trim()}`;
                    }
                } else if (event.description && event.description.includes('Lieu')) {
                    // Chercher "Lieu" dans la description
                    const lieuMatch = event.description.match(/Lieu[:\s]*([^\n\r,]+)/i);
                    if (lieuMatch) {
                        locationInfo = ` üìç ${lieuMatch[1].trim()}`;
                    }
                }
                
                const eventTitle = event.summary || '√âv√©nement sans titre';
                
                // Formatage final sans Markdown, optimis√© pour iPhone
                scheduleText += `${emoji} ${startTime} - ${endTime} (${duration})\n`;
                scheduleText += `   ${eventTitle}${locationInfo}\n`;
                
                // Ajouter une ligne vide entre les √©v√©nements sauf pour le dernier
                if (index < todayEvents.length - 1) {
                    scheduleText += '\n';
                }
            });
            
            scheduleText += "\n\nüí™ Bonne journ√©e et bon courage ! üåü";
            
        } else {
            const dayName = today.toLocaleDateString('fr-FR', { weekday: 'long' });
            scheduleText = `üéâ Rien de pr√©vu aujourd'hui (${dayName.charAt(0).toUpperCase() + dayName.slice(1)}) !\n\nüèñÔ∏è Profite bien de ta journ√©e libre ! ‚ú®`;
        }
        
        console.log('‚úÖ Formatage termin√©, envoi de la r√©ponse');
        
        // 4. Renvoyer le JSON
        res.status(200).json({
            success: true,
            date: today.toISOString().split('T')[0],
            eventsCount: todayEvents.length,
            schedule: scheduleText,
            lastUpdated: new Date().toISOString()
        });

    } catch (error) {
        console.error("‚ùå Erreur de traitement ICS:", error);
        
        let errorMessage = "‚ö†Ô∏è Erreur serveur. ";
        
        if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
            errorMessage += "Impossible de se connecter au calendrier. V√©rifiez l'URL du calendrier.";
        } else if (error.code === 'ETIMEDOUT') {
            errorMessage += "Timeout lors de la r√©cup√©ration du calendrier.";
        } else {
            errorMessage += "V√©rifiez l'URL du calendrier ou le code Vercel.";
        }
        
        res.status(500).json({ 
            success: false,
            schedule: errorMessage,
            error: error.message,
            lastUpdated: new Date().toISOString()
        });
    }
};